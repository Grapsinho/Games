მოკლედ პირველლ რიგში ვწერთ ჰტმლს გვჭირდება gamecontainer რაშიც შევინახავთ ყველაფერს
შემდეგ გვჭირდება რომ დავხატოთ ბორდერი რისთვისაც ვიყენებთ canvas
ასევე გვჭირდება ქულები და ბოლოს resetBtn

შემდეგ ცსსში კანვას ვუთითებთ ბორდერს როგორიც გვინდა და ვაცენტრალებთ ყვეალფერს text-align
დანარჩენს ვუკეთებთ ბეისიქ სტაილებს


ესეიგი გადავდივართ ჯავასკრიპტში პირველი გადმოგვაქ კანვასი ხოლო შემდგომ გვჭირდება კონტექსტი
ctx = კანვასი.getContext("2d") ასე ჩვენ ვქმნით ორგანზომილებიან რენდერის კონტექსტს 
სხვა შემთხვევაში სხვა კონტექსტი იქნებოდა 3 განზომილებიანი
შემდეგ მოგვაქ ქულის ტექსტი რათა შევცვალოთ შემდეგ
შემდეგ resetBtn
შემდეგ გვინდა ჩვენი ბოარდის ვიდი და ჰეითი ვქმნით ორ ცვლადს ერთს ვიდისთვის მეორეს ჰეითისთვის
gameBoard.width, gameBoard.height ასე გამოვთვლით

შემდეგ ვქმნით ფერების ცვლადებს პირველი იქნება ბოარდისთვის რასაც გვინდა იმას ჩავწერთ
შმდეგი იქნება გველის ფერი, შემდეგი თუგვინდა რო გველს ბორდერი ქონდეს მაგის ფერი,
ხოლო შემდეგი ვაშლის ფერი.

შემდეგ გვინდა ცვლადი რომელშიც იქნება ჩვენი იუნითების ზომა მაგალითად 25

შემდეგ ვქმნით ცვლადს running=false რათა შემდეგ გავიგოთ თამაში მიდის თუ არა
შემდგომ გვინდა xVelocity ანუ ამით ვამოძრავებთ ჩვენს გველს თუ იქნება ის ნეგატივი გველი
წავა მარცხნივ ისე პირიქით ესეც იქნება ჩვენი იუნითების ზომა ანუ 25პიქსელით შორს წავალთ
yVelocity=0 ამით უკვე იგრეკ აქსისზე ვმოძრაობთ ნული იმიტომ რო დასაწყისში ჩვენ წამოვალთ
მარჯვნივ ხოლო თუ გვინდა რომ მაღლა ავიდეთ ნეგატივი ხოლო დაბლა პოზიტივი ციფრები

შემდეგ გვინდა foodX, foodY ცვლადები რომლებსაც შემდგომ მივანიჭებთ რენდომულ მდებარეობას
score=0

შემდეგ ვაკეთებ გველს snake = [
    {x:unitSize * 4, y:0}
    {x:unitSize * 3, y:0}
    {x:unitSize * 2, y:0}    
    {x:unitSize, y:0}
    {x:0, y:0}
]
გვექნება დასაწყისში 5 ტანის ნაწილი ხუ ოთხკუთხედი unitSize არარის ნეგატივი ამიტომაც ეს 
ნაწილები იქნება მარჯვნივ ყველას ექნება თავისი კორდინატები და ასშ... ანუ 25პიქსელით
დაშორდება ყველა ბოდი ფართი ერთმანეთისგან

შემდეგ გვინდა ვინდოუ ვუსმენთ "keydown"_ზე და ვუთითებთ ქოლბაქ ფუნქციას changeDirection
ხოლო შემდეგ resetBtn_ს ვუსმენთ კლიკზე ქოლბექი resetGame

შემდეგ აქ ვიძახებთ gameStart()

ხოლო ეხლა ფუნქციები რომელიბც დაგვჭრდება

gameStart() {
  running ი იქნება თრუ
  scoreText იქნება score ტოლი
  და ვიძახებთ ამეებს nextTick(), createFood(), drawFood()
}

nextTick() {
  შემდეგ გვაქ იფ სთეითმენთი ფრჩხილებში ვუწერთ running ანუ თუ გაშვებულია თამაში რა გააკეთოს
  {
    შემდეგ გვაქ სეთ თაიმაუთი {და აქ ვათავსებთ შემდეგ ფუნქციებს clearBoard(), drawFood(), moveSnake(), drawSnake(), checkGameOver(), nextTick()}
    და შემდეგ რამდენ მილიწამში გვინდა რო მოხდეს მოქმედება მაგ 75
 }

  else {displayGameOver()}
}

clearBoard() { ამით ჩვენ თავიდან დავხატავთ ბოარდს
  ctx.fillStyle = boardBg
  ვიწყებთ მაღლა მარცხენა კედლიდან, და ვამთავრებთ დაბლა მარჯვენა კედელთან
  ctx.fillRect(0, 0, gameWidth სიგანისთვის, gameHeight სიმაღლისთვის)
}

createFood() {ვაშლს მოვათავსებთ რენდომულ ადგილას
  ვქმნით ფუნქციას randomFood(min, max) {
     const randNum - math.round(math.random() * (max - min) + min) / untiSize) * untisize
     და ვარეთარნებთ რენდომნამს
  }

  შემდეგ ფოოდხ იქნება რანდომFood ის ტოლი და არგუმნტად გადავცემთ (0, gamewidth - unitsize)
  foodY იგივე იქნება
}

drawFood() {
  ctx.fillStyle = foodColor
  ctx.fillRect(foodX(კორდინატია ეს), foodY(კორდინატია ეს), unitSize, unitSize)
}

moveSnake() {
  ვქმნით ჰედის ცვლადს და ეს იქნება ობჯექტი {აქ ვწერთ x: snake[0].x + xVelocity
                                               y: snake[0].y + yVelocity}s

  snake.unshift(head) ანუ წინ დაემატება ეს თავი

  ეხლა კიდე გავიგოთ აქვს თუ არა ნაჭამი გველს ვაშლი გვჭირდება იფ სთეითმენთი
  
  if(snake[0].x == foodX && snake[0].y == foodY ანუ გველი დაეჯახა ვაშლს) {მაშინ score++ scoreText.textContent = score createFood()}
}

drawSnake() {
  ctx.fillStyle = snakeColor
  ctx.strokeStyle = snakeBorder
  ხოლო შემდგომ ყველა გველის ოთხკუთხედისთვის ვაკეთებთ ფორიჩს და არგუმენტი იქნება snakePart {
     აქ ვწერთ ctx.fillRect(snakePart.x, snakePart.y, unitSize, unitSize) 
             ctx.strokeRect(snakePart.x, snakePart.y, unitSize, unitSize) ბორდერისთვის
  }
}

changeDirection(event) {
  ვქმნით ცვლადს ჩვენი დაწოლილი ღილაკისთვის მაგ keyPressed = event.keyCode
  const LEFT = 37
  const Right = 39
  const down = 40
  up = 38

  ეხლა ვამოძრავებთ ცვლადი going Up = (yVelocity == -unitSize)
  და ასე დავწერთ ყველასთივს 

  შემდეგ ვქმნით სვიჩს(true) {
    case(keyPressed == Left && !goingRight ანუ ღილაკზე გვაქ დაჭერილი მივდივართ მარცხნივ მაგრამ არ შეგვიძლია წავიდეთ მარჯვნივ):
         xVelocity = -unitSize ანუ მარცხნივ მივდივართ
         yVelocity = 0 რადგან არ წავიდეთ მაღლა ან დაბლა
  }
}

checkGameOver() {
  შემდგომ გვჭირდება სვიჩი(true){
   და აქ ვუწერთ ქეისს (snake[0].x < 0) ეს ნიშნავს რომ ჩვენ გავედით მარცხენა ბორდერიდან
    running = false
    break

    შემდეგ ქისი (snake[0].x >= gameWidth): ანუ ჩვენ გავედით მარჯვენა ბორდერიდან
    running = false
    break
    
    და აქ დავუწერთ უკვე სიმაღლისთვისაც
 }

   ასევე რომ არ შეგვეზლოს ცეჯახებოდეთ ჩვენს თავს 
   გვჭირდება ფორ ლუპი რომელიც იწყება ერთიდან და არის სნაკე.ლენგტჰზე ნაკლები ამის შგნით ვწერთ
   
   ანუ თავის უკანა ნაწილები იმიტორო ერთიდან ვიწყებთ
   იფ(snake[i].x == snake[0].x && snake[i].y == snake[0].y) {running = false}
}

displayGameOver() {
  მოკლედ ჩვენ ეხლა ტექსტს თამაში დასრულდებისას დავხატავთ კანვასით ასე
  ctx.font = "აქ ზომა ტექსტის აქ ფონტი"
  ctx.fillStyle = ფერი
  ctx.textAlign = ელაინი
  ctx.fillText("რაც გვინდა რო ეწეროს", აქეთ უკვე კორდინატები მაგალითად თუ გვინდა რომ იყოს ცენტრში სიგრძეს და სიგანს გავყოფთ 2ზე)
  running = false
}

resetGame() {
  score = 0
  xVelocity = unitSize
  xVelocity = 0

  snake = [
    {x:unitSize * 4, y:0}
    {x:unitSize * 3, y:0}   თავიდან ვასპაუნებთ ვქმნით გველს
    {x:unitSize * 2, y:0}    
    {x:unitSize, y:0}
    {x:0, y:0}
]

 gameStart()
}


































